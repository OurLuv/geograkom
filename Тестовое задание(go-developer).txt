Тестовое задание:


Необходимо разработать микросервис, который будет осуществлять учет правильного распределения грузов по стране.


1)Конфигурация сервиса должна управляться как через переменные окружения, так и через аргументы командой строки
        флаг `-a` отвечает за адрес запуска HTTP-сервера(значение может быть таким: localhost:8080)
        флаг `-b` отвечает за адрес подключения к БД(значение может быть таким: postgres://postgres:pwd@host:port/db?)


2)При запуске, сервис должен подключиться к базе данных и инициализировать таблицу вида:


   route_id  | route_name |   load  | cargo_type | is_actual | 
   (int, PK) |   (string) | (float) |  (string)  |   (bool)  |


3)Сводное HTTP API:
        3.1)POST         /api/route/register - регистрация(создание) нового маршрута
        3.2)GET          /api/route/{id} (где id - индентификатор маршрута)  - получение данных о маршруте по индентификатору.
        3.3)DELETE          /api/route/ - удаление маршрутов по индентификаторам




3.1)Добавить хэндлер POST /api/route/register, который в теле запроса принимает информация об одном маршруте в виде JSON.
        Запрос может быть таким:
        POST http://localhost:8080/api/route/register
        Content-Type: application/json
        {"route_id": 125376, "route_name": "Москва-Тверь", "load": 89126.4, "cargo_type": "sand"})


        Если маршрут с таким route_id уже существует, то нужно сгенерировать новый route_id и вставить информацию о маршруте в БД с новым индентификатором,
        при этом у старого маршрута нужно поставить флаг is_actual=false и вернуть клиенту новый route_id.
        
        Ожидаемые ответы от сервера:
        200 - маршрут успешно зарегистрирован
        208 - маршрут с таким индентификатором уже был зарегистрирован
        500 - внутренняя ошибка сервера


3.2)Добавить хэндлер GET /api/route/{id}, который принимает только индентификатор маршрута как query-параметр
        Запрос может быть таким:
        GET http://localhost:8080api/route/125376
        Content-Type: text/plain


        Ожидаемые ответы от сервера:
        200 - успешно получен маршрут(формат ответа: {"route_name": "Москва-Тверь", "load": 89126.4, "cargo_type": "sand"}))
        410 - маршрут неактуален(если флаг is_actual=false)
        500 - внутренняя ошибка сервера
        
3.3)Добавить хэндлер DELETE  /api/route/, который в теле запроса принимает массив индентификаторов дорог для асинхронного удаления.
        Запрос может быть таким:
        DELETE http://localhost:8080/api/route/
        Content-Type: application/json
        [125376, 642732, 8945462]
        
        В случае успешного приёма запроса хендлер должен возвращать HTTP-статус 202 Accepted. Фактический результат удаления может происходить позже,
        оповещать пользователя об успешности или неуспешности не нужно.        


        Ожидаемые ответы от сервера:
        202 - удаление маршрутов принято в обработку
        500 - внутренняя ошибка сервера




Общие ограничения и требования:
        язык для выполнения задания - Go;
        покрытие тестами более 40%;
        решение должно быть в git-репозитории;
        хранилище данных — PostgreSQL;
        драйвер для подключения к БД - pgx;
        типы и формат хранения данных (в том числе паролей и прочей чувствительной информации) остаётся на ваше усмотрение;